(self.webpackChunk_site_blog=self.webpackChunk_site_blog||[]).push([[5761],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return p},kt:function(){return u}});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),h=c(r),u=n,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||a;return r?o.createElement(m,i(i({ref:t},p),{},{components:r})):o.createElement(m,i({ref:t},p))}));function u(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},6041:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return h}});var o=r(2122),n=r(9756),a=(r(7294),r(3905)),i=["components"],s={},l="Property order is predictable in JavaScript objects since ES2015",c={unversionedId:"core/detail/property_order_is_predictable_in_javascript_objects_since_es2015_en",id:"core/detail/property_order_is_predictable_in_javascript_objects_since_es2015_en",isDocsHomePage:!1,title:"Property order is predictable in JavaScript objects since ES2015",description:'The common misconception \u2013 "the order of JavaScript properties cannot be guaranteed"',source:"@site/docs/core/detail/property_order_is_predictable_in_javascript_objects_since_es2015_en.md",sourceDirName:"core/detail",slug:"/core/detail/property_order_is_predictable_in_javascript_objects_since_es2015_en",permalink:"/blog/docs/core/detail/property_order_is_predictable_in_javascript_objects_since_es2015_en",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/core/detail/property_order_is_predictable_in_javascript_objects_since_es2015_en.md",version:"current",frontMatter:{}},p=[{value:"The common misconception \u2013 &quot;the order of JavaScript properties cannot be guaranteed&quot;",id:"the-common-misconception--the-order-of-javascript-properties-cannot-be-guaranteed",children:[{value:"The internal <code>ownPropertyKeys</code> method",id:"the-internal-ownpropertykeys-method",children:[]}]},{value:"All together",id:"all-together",children:[]},{value:"Additional resources",id:"additional-resources",children:[]}],d={toc:p};function h(e){var t=e.components,r=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"property-order-is-predictable-in-javascript-objects-since-es2015"},"Property order is predictable in JavaScript objects since ES2015"),(0,a.kt)("h2",{id:"the-common-misconception--the-order-of-javascript-properties-cannot-be-guaranteed"},'The common misconception \u2013 "the order of JavaScript properties cannot be guaranteed"'),(0,a.kt)("p",null,'When you started writing JavaScript a few years ago, you might have heard the statement that the order of properties in JS objects is not predictable. I never came across an odd and unusual order of properties, but I always followed the rule "never rely on property order".'),(0,a.kt)("h3",{id:"the-internal-ownpropertykeys-method"},"The internal ",(0,a.kt)("inlineCode",{parentName:"h3"},"ownPropertyKeys")," method"),(0,a.kt)("p",null,"It turns out \u2013 since ES2015 there are methods that are based on specific rules defining the order of properties, and apart from one particular case the order is chronological. The order of properties in an object depends on the type of the included properties and their values."),(0,a.kt)("p",null,"Looking at the spec the rules are defined in ",(0,a.kt)("a",{parentName:"p",href:"http://www.ecma-international.org/ecma-262/6.0/#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys"},'the internal "ownPropertyKeys" method'),". Which is used for example by fairly new methods ",(0,a.kt)("inlineCode",{parentName:"p"},"Object.getOwnPropertyNames")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Reflect.ownKeys"),"."),(0,a.kt)("p",null,"What is interesting is that there was a spec change of e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"Object.keys")," from ",(0,a.kt)("a",{parentName:"p",href:"https://www.ecma-international.org/ecma-262/5.1/#sec-15.2.3.14"},"ES5")," to ",(0,a.kt)("a",{parentName:"p",href:"http://www.ecma-international.org/ecma-262/6.0/#sec-object.keys"},"ES6"),". The ES6 spec defines that ",(0,a.kt)("inlineCode",{parentName:"p"},"Object.keys")," also relies on ",(0,a.kt)("inlineCode",{parentName:"p"},"ownPropertyKeys")," which makes it predictable in today's browsers, too."),(0,a.kt)("p",null,"This also means that you have to be careful with this method, though, and shouldn't rely on a predictable order using ",(0,a.kt)("inlineCode",{parentName:"p"},"Object.keys")," because the results ",(0,a.kt)("a",{parentName:"p",href:"https://www.reddit.com/r/javascript/comments/9ozyn3/property_order_is_predictable_in_javascript/e7yhm3g/"},"may vary depending on the browser implementation"),"."),(0,a.kt)("p",null,"But enough of the theory: let's have a look at the defined property order for methods implementing ",(0,a.kt)("inlineCode",{parentName:"p"},"ownPropertyKeys"),"."),(0,a.kt)("h4",{id:"1-integer-indices"},"1. Integer Indices"),(0,a.kt)("p",null,"All properties that are integer indices appear first in the overall object property order and are sorted numerically."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const objWithIndices = {\n  23: 23,\n  '1': 1,\n  1000: 1000\n};\n\nconsole.log(Reflect.ownKeys(objWithIndices));\n// [1, 23, 1000]\n// \u261d\ufe0f following numeric order\n")),(0,a.kt)("h4",{id:"2-strings-that-are-no-integers"},"2. Strings (that are no integers)"),(0,a.kt)("p",null,"Properties that do not count to integer indices and are not of type ",(0,a.kt)("inlineCode",{parentName:"p"},"Symbol")," come next and follow chronological order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const objWithStrings = {\n  'bar': 'bar',\n  '01': '01'\n};\n\nobjWithStrings.last = 'last';\nobjWithStrings['veryLast'] = 'veryLast';\n\nconsole.log(Reflect.ownKeys(objWithStrings));\n// ['bar', '01', 'last', 'veryLast']\n// \u261d\ufe0f following chronological order\n")),(0,a.kt)("h4",{id:"3-symbols"},"3. Symbols"),(0,a.kt)("p",null,"At last, Symbols follow a chronological order, too."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const objWithSymbols = {\n  [Symbol('first')]: 'first',\n  [Symbol('second')]: 'second'\n};\n\nobjWithSymbols[Symbol('last')] = 'last';\n\nconsole.log(Reflect.ownKeys(objWithSymbols));\n// [Symbol(first), Symbol(second), Symbol(last)]\n// \u261d\ufe0f following chronological order\n")),(0,a.kt)("h2",{id:"all-together"},"All together"),(0,a.kt)("p",null,"When you combine these rules, you\u2019ll see that integers are always in the \u201cfront row\u201d of object properties followed by strings and Symbols. ",(0,a.kt)("strong",{parentName:"p"},"Moreover, we can control the order of the string and Symbol properties because they\u2019re chronological!")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"const obj = {\n  '2': 'integer: 2',\n  'foo': 'string: foo',\n  '01': 'string: 01',\n  1: 'integer: 1',\n  [Symbol('first')]: 'symbol: first'\n};\n\nobj['0'] = '0';\nobj[Symbol('last')] = 'symbol: last';\nobj['veryLast'] = 'string: very last';\n\nconsole.log(Reflect.ownKeys(obj));\n// [ \"0\", \"1\", \"2\", \"foo\", \"01\", \"veryLast\", Symbol(first), Symbol(last) ]\n// -> 1. integers in numeric order\n// -> 2. strings in chronological order\n// -> 3. Symbols in chronological order\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},'Edited: As Malgosia Stepniak pointed out "own property order" is ',(0,a.kt)("a",{parentName:"em",href:"https://twitter.com/malgosiastp/status/1052539495453773824"},"only fully supported in modern browsers and not in e.g. IE"),".")),(0,a.kt)("h2",{id:"additional-resources"},"Additional resources"),(0,a.kt)("p",null,"Thanks to Axel who wrote about this three years ago already. :)"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"http://2ality.com/2015/10/property-traversal-order-es6.html#traversing-the-own-keys-of-an-object"},"The traversal order of object properties in ES6")," by ",(0,a.kt)("a",{parentName:"li",href:"https://twitter.com/rauschma"},"Axel Rauschmayer")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys"},"ECMAScript\xae 2019 Language Specification - OrdinaryOwnPropertyKeys")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://stackoverflow.com/questions/30076219/does-es6-introduce-a-well-defined-order-of-enumeration-for-object-properties"},'"Does ES6 introduce a well-defined order of enumeration for object properties?"')," on Stack Overflow")))}h.isMDXComponent=!0}}]);