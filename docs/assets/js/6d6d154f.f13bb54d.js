(self.webpackChunk_site_blog=self.webpackChunk_site_blog||[]).push([[5629],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=i,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7839:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(2122),i=n(9756),o=(n(7294),n(3905)),a=["components"],s={id:"macos_install_tree",title:"macOS \u5b89\u88c5 tree"},l=void 0,c={unversionedId:"linux/macos_install_tree",id:"linux/macos_install_tree",isDocsHomePage:!1,title:"macOS \u5b89\u88c5 tree",description:"brew \u5b89\u88c5 tree",source:"@site/docs/linux/macos_install_tree.md",sourceDirName:"linux",slug:"/linux/macos_install_tree",permalink:"/blog/docs/linux/macos_install_tree",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/linux/macos_install_tree.md",version:"current",frontMatter:{id:"macos_install_tree",title:"macOS \u5b89\u88c5 tree"},sidebar:"docs",previous:{title:"macOS \u5b89\u88c5 Rime \u8f93\u5165\u6cd5",permalink:"/blog/docs/linux/macos_install_rime"},next:{title:"\u4e3a\u4ec0\u4e48\u8981\u5199 `Docker \u5b89\u88c5 Debian 10` \u548c `Debian 10 \u5b89\u88c5 Docker`\uff1f",permalink:"/blog/docs/linux/why_docker_install_debian10_and_debian10_install_docker"}},u=[{value:"brew \u5b89\u88c5 tree",id:"brew-\u5b89\u88c5-tree",children:[]},{value:"tree \u547d\u4ee4\u7684\u6240\u6709\u9009\u9879",id:"tree-\u547d\u4ee4\u7684\u6240\u6709\u9009\u9879",children:[]},{value:"tree \u547d\u4ee4\u7684\u5e38\u7528\u9009\u9879",id:"tree-\u547d\u4ee4\u7684\u5e38\u7528\u9009\u9879",children:[]},{value:"\u5e38\u89c4\u7528\u6cd5",id:"\u5e38\u89c4\u7528\u6cd5",children:[]}],p={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"brew-\u5b89\u88c5-tree"},"brew \u5b89\u88c5 tree"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ brew install tree # macOS intel \u5185\u6838\n$ arch -arm64 brew install tree # macOS m1 \u5185\u6838\n")),(0,o.kt)("h3",{id:"tree-\u547d\u4ee4\u7684\u6240\u6709\u9009\u9879"},"tree \u547d\u4ee4\u7684\u6240\u6709\u9009\u9879"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"$ tree --help\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"usage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]\n        [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]\n        [--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]\n        [--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]<f>]\n        [--sort[=]<name>] [--matchdirs] [--ignore-case] [--fromfile] [--]\n        [<directory list>]\n  ------- Listing options -------\n  -a            All files are listed.\n  -d            List directories only.\n  -l            Follow symbolic links like directories.\n  -f            Print the full path prefix for each file.\n  -x            Stay on current filesystem only.\n  -L level      Descend only level directories deep.\n  -R            Rerun tree when max dir level reached.\n  -P pattern    List only those files that match the pattern given.\n  -I pattern    Do not list files that match the given pattern.\n  --ignore-case Ignore case when pattern matching.\n  --matchdirs   Include directory names in -P pattern matching.\n  --noreport    Turn off file/directory count at end of tree listing.\n  --charset X   Use charset X for terminal/HTML and indentation line output.\n  --filelimit # Do not descend dirs with more than # files in them.\n  --timefmt <f> Print and format time according to the format <f>.\n  -o filename   Output to file instead of stdout.\n  ------- File options -------\n  -q            Print non-printable characters as '?'.\n  -N            Print non-printable characters as is.\n  -Q            Quote filenames with double quotes.\n  -p            Print the protections for each file.\n  -u            Displays file owner or UID number.\n  -g            Displays file group owner or GID number.\n  -s            Print the size in bytes of each file.\n  -h            Print the size in a more human readable way.\n  --si          Like -h, but use in SI units (powers of 1000).\n  -D            Print the date of last modification or (-c) status change.\n  -F            Appends '/', '=', '*', '@', '|' or '>' as per ls -F.\n  --inodes      Print inode number of each file.\n  --device      Print device ID number to which each file belongs.\n  ------- Sorting options -------\n  -v            Sort files alphanumerically by version.\n  -t            Sort files by last modification time.\n  -c            Sort files by last status change time.\n  -U            Leave files unsorted.\n  -r            Reverse the order of the sort.\n  --dirsfirst   List directories before files (-U disables).\n  --sort X      Select sort: name,version,size,mtime,ctime.\n  ------- Graphics options -------\n  -i            Don't print indentation lines.\n  -A            Print ANSI lines graphic indentation lines.\n  -S            Print with CP437 (console) graphics indentation lines.\n  -n            Turn colorization off always (-C overrides).\n  -C            Turn colorization on always.\n  ------- XML/HTML/JSON options -------\n  -X            Prints out an XML representation of the tree.\n  -J            Prints out an JSON representation of the tree.\n  -H baseHREF   Prints out HTML format with baseHREF as top directory.\n  -T string     Replace the default HTML title and H1 header with string.\n  --nolinks     Turn off hyperlinks in HTML output.\n  ------- Input options -------\n  --fromfile    Reads paths from files (.=stdin)\n  ------- Miscellaneous options -------\n  --version     Print version and exit.\n  --help        Print usage and this help message and exit.\n  --            Options processing terminator.\n")),(0,o.kt)("p",null,"\u8fd9\u7bc7\u6587\u7ae0\u5305\u542b\u6240\u6709\u9009\u9879\u7684\u7ffb\u8bd1\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://einverne.github.io/post/2017/01/tree-command-to-generate-directory-structure.html"},"tree \u751f\u6210\u76ee\u5f55\u7ed3\u6784")),(0,o.kt)("h3",{id:"tree-\u547d\u4ee4\u7684\u5e38\u7528\u9009\u9879"},"tree \u547d\u4ee4\u7684\u5e38\u7528\u9009\u9879"),(0,o.kt)("p",null,"\u4ece help \u4e2d\uff0c\u6211\u4eec\u5217\u51fa\u4e00\u4e9b\u5e38\u7528\u7684\u9009\u9879\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"  ------- \u5217\u8868\u9009\u9879 -------\n  -a            \u5217\u51fa\u6240\u6709\u6587\u4ef6\u3002\n  -d            \u4ec5\u5217\u51fa\u76ee\u5f55\u3002\n  -L level      \u4ec5\u4e0b\u6c89\u5230\u6307\u5b9a\u7ea7\u522b\u76ee\u5f55\u6df1\u5ea6\u3002\uff08\u4f8b\u5982\uff0c\u5c55\u793a\u6700\u8fd1 2 \u5c42\u6df1\u5ea6\u7684\u76ee\u5f55\uff09\n  --charset X   \u4f7f\u7528 charset X \u7f16\u7801\uff0c\u7528\u4e8e terminal/HTML \u548c\u7f29\u8fdb\u7ebf\u8f93\u51fa\u3002\n  ------- \u6587\u4ef6\u9009\u9879 -------\n  -s            \u6253\u5370\u6bcf\u4e2a\u6587\u4ef6\u7684\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002\n  ------- \u6392\u5e8f\u9009\u9879 -------\n  -v            \u6309\u5b57\u6bcd\u6570\u5b57\u987a\u5e8f\u5bf9\u6587\u4ef6\u8fdb\u884c\u6392\u5e8f\u3002\n  --dirsfirst   \u5728\u6587\u4ef6\u4e4b\u524d\u5217\u51fa\u76ee\u5f55\uff08-U \u7981\u7528\uff09\u3002\n  ------- \u56fe\u5f62\u9009\u9879 -------\n  ------- XML/HTML/JSON \u9009\u9879 -------\n  ------- \u8f93\u5165\u9009\u9879 -------\n  ------- \u6742\u9879\u9009\u9879 -------\n")),(0,o.kt)("h3",{id:"\u5e38\u89c4\u7528\u6cd5"},"\u5e38\u89c4\u7528\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'$ tree --dirsfirst -v # \u6309\u7167\u6587\u4ef6\u5939\u4f18\u5148\u548c\u5b57\u6bcd\u6570\u5b57\u987a\u5e8f\uff0c\u5bf9\u6587\u4ef6\u8fdb\u884c\u6392\u5e8f\n$ tree -I "node_modules|.git" # \u5ffd\u7565 node_modules, .git \u76ee\u5f55\n$ tree --charset utf-8 # \u4f7f\u7528 utf-8 \u7f16\u7801\n')))}d.isMDXComponent=!0}}]);