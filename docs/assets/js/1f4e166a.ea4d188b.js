(self.webpackChunk_site_blog=self.webpackChunk_site_blog||[]).push([[8229],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return h}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),p=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},s=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(t),h=a,f=s["".concat(d,".").concat(h)]||s[h]||u[h]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=s;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}s.displayName="MDXCreateElement"},6874:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return c},default:function(){return s}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],l={id:"you_might_not_need_that_recursive_function_in_javascript",title:"\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u5728 JavaScript \u4e2d\u9012\u5f52\u51fd\u6570"},d=void 0,p={unversionedId:"core/detail/you_might_not_need_that_recursive_function_in_javascript",id:"core/detail/you_might_not_need_that_recursive_function_in_javascript",isDocsHomePage:!1,title:"\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u5728 JavaScript \u4e2d\u9012\u5f52\u51fd\u6570",description:"\u539f\u6587\uff1aYou Might Not Need that Recursive Function in JavaScript",source:"@site/docs/core/detail/you_might_not_need_that_recursive_function_in_javascript.md",sourceDirName:"core/detail",slug:"/core/detail/you_might_not_need_that_recursive_function_in_javascript",permalink:"/blog/docs/core/detail/you_might_not_need_that_recursive_function_in_javascript",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/core/detail/you_might_not_need_that_recursive_function_in_javascript.md",version:"current",frontMatter:{id:"you_might_not_need_that_recursive_function_in_javascript",title:"\u4f60\u53ef\u80fd\u4e0d\u9700\u8981\u5728 JavaScript \u4e2d\u9012\u5f52\u51fd\u6570"}},c=[{value:"\u91cd\u8981\u58f0\u660e",id:"\u91cd\u8981\u58f0\u660e",children:[]},{value:"\u6587\u7ae0\u5185\u5bb9",id:"\u6587\u7ae0\u5185\u5bb9",children:[{value:"\u63d0\u51fa\u95ee\u9898",id:"\u63d0\u51fa\u95ee\u9898",children:[]},{value:"\u89e3\u51b3\u65b9\u6848",id:"\u89e3\u51b3\u65b9\u6848",children:[]}]}],u={toc:c};function s(e){var n=e.components,l=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u539f\u6587\uff1a",(0,i.kt)("a",{parentName:"p",href:"https://hackernoon.com/you-might-not-need-that-recursive-function-in-javascript-275651522185"},"You Might Not Need that Recursive Function in JavaScript"))),(0,i.kt)("h2",{id:"\u91cd\u8981\u58f0\u660e"},"\u91cd\u8981\u58f0\u660e"),(0,i.kt)("p",null,"\u8fd9\u7bc7\u4e3b\u8981\u662f\u8bb0\u5f55\u4e0b ",(0,i.kt)("inlineCode",{parentName:"p"},"\u5982\u4f55\u901a\u8fc7\u4e00\u6b21\u904d\u5386\u6784\u5efa\u4e00\u4e2a\u6811"),"\uff0c\u7ed3\u8bba\u76f4\u63a5\u770b\u6587\u7ae0\u6700\u540e\u7684\u4ee3\u7801\u3002"),(0,i.kt)("p",null,"\u6587\u7ae0\u5c31\u4e0d\u5168\u90e8\u7ffb\u8bd1\u4e86\uff0c\u53ea\u7ffb\u8bd1\u91cd\u8981\u5185\u5bb9\u3002"),(0,i.kt)("h2",{id:"\u6587\u7ae0\u5185\u5bb9"},"\u6587\u7ae0\u5185\u5bb9"),(0,i.kt)("p",null,"\u5728\u7f16\u7a0b\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u9762\u4e34\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u7b54\u6848\u4f3c\u4e4e\u9700\u8981\u4ee5\u4e0d\u786e\u5b9a\u7684\u6b21\u6570\u89e3\u51b3\u540c\u4e00\u4e2a\u95ee\u9898\u3002\u5f53\u6211\u4eec\u9047\u5230\u8fd9\u6837\u7684\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u503e\u5411\u4e8e\u4f7f\u7528\u9012\u5f52 \u2014\u2014 \u901a\u5e38\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u51fd\u6570\u6765\u5b9e\u73b0\uff0c\u8be5\u51fd\u6570\u6839\u636e\u9700\u8981\u591a\u6b21\u8c03\u7528\u81ea\u8eab\u3002\u9012\u5f52\u5728\u7f16\u7a0b\u4e2d\u6781\u5176\u91cd\u8981\uff0c\u5f88\u591a\u95ee\u9898\u53ea\u80fd\u901a\u8fc7\u4f7f\u7528\u5b83\u6765\u89e3\u51b3\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u9012\u5f52\u53ef\u80fd\u4f1a\u66f4\u6162\uff0c\u586b\u6ee1\u8c03\u7528\u5806\u6808\uff0c\u5e76\u4e14\u5728\u6982\u5ff5\u4e0a\u53ef\u80fd\u66f4\u68d8\u624b\u3002"),(0,i.kt)("p",null,"\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u63a2\u8ba8\u4e00\u4e2a\u95ee\u9898\u7684\u793a\u4f8b\uff0c\u8be5\u95ee\u9898\u4f3c\u4e4e\u9002\u5408\u9012\u5f52\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u5bf9 JavaScript \u5bf9\u8c61\u5f15\u7528\u7684\u7406\u89e3\u6765\u66f4\u6709\u6548\u5730\u89e3\u51b3\u3002\u8fd9\u4e2a\u5e16\u5b50\u793a\u4f8b\u7684\u52a8\u673a\u6765\u81ea\u6211\u6539\u7f16\u7684\u4e00\u4e2a\u4f18\u79c0\u7684 ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/18018037/6525724"},"StackOverflow \u7b54\u6848"),"\u3002"),(0,i.kt)("h3",{id:"\u63d0\u51fa\u95ee\u9898"},"\u63d0\u51fa\u95ee\u9898"),(0,i.kt)("p",null,"\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u8bd5\u56fe\u57fa\u4e8e\u4e00\u4e2a\u6241\u5e73\u7684\u5bf9\u8c61\u6570\u7ec4\uff0c\u6765\u6784\u5efa\u4e00\u4e2a\u5c42\u7ea7\u7684\u5bf9\u8c61\u6811\u7ed3\u6784\u3002\u4e8b\u5148\u4e0d\u77e5\u9053\u6811\u7684\u6df1\u5ea6\uff0c\u4f46\u662f\u77e5\u9053\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u6709\u4e00\u4e2a\u7236\u8282\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u6709\u4efb\u610f\u6570\u91cf\u7684\u5b50\u8282\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u53ef\u89c6\u5316\u5730\u5c55\u793a\u4e00\u4e2a\u793a\u4f8b\u6811\uff1a"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Example Tree Structure",src:t(8580).Z})),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"(\u793a\u4f8b\u6811\u7ed3\u6784)")),(0,i.kt)("p",null,"As mentioned, the data we receive to build this tree example is a flattened array in the following format. Each element represents one node of the tree and can be the child of only one parent node. Node 8 has no parent, so we can see in the array below that the object for ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," 8 has a ",(0,i.kt)("inlineCode",{parentName:"p"},"parentId")," equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const flat = [\n  { id: 1, parentId: 3 },\n  { id: 3, parentId: 8 },\n  { id: 4, parentId: 6 },\n  { id: 6, parentId: 3 },\n  { id: 7, parentId: 6 },\n  { id: 8, parentId: null },\n  { id: 10, parentId: 8 }, \n  { id: 13, parentId: 14 },\n  { id: 14, parentId: 10 }\n]\n")),(0,i.kt)("p",null,"The final structure we need to rearrange this flat array into is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"[\n  { \n    id: 8,\n    children: [\n      { \n        id: 3, \n        children: [\n          { \n            id: 1, \n            children: [] \n          }, \n          { \n            id: 6, \n            children: [ \n              { id: 4, children: [] }, \n              { id: 7, children: [] } \n            ]\n          }\n        ] \n      },\n      { \n        id: 10, \n        children: [ \n          { \n            id: 14, \n            children: [\n              { id: 13, children: [] }\n            ] \n          }\n        ]\n      }\n    ]\n  }\n]\n")),(0,i.kt)("h3",{id:"\u89e3\u51b3\u65b9\u6848"},"\u89e3\u51b3\u65b9\u6848"),(0,i.kt)("p",null,"Your first inkling in this scenario might be to reach for recursion: we\u2019re given a tree of indeterminate length. We imagine we might have to create a function that populates a node\u2019s children. Then, we recursively call that function until the tree is fully populated and (i.e., no more child nodes are found)."),(0,i.kt)("p",null,"While this would probably work, there is a better way!"),(0,i.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u904d\u5386\u6570\u7ec4\uff0c\u5e76\u5c06\u6bcf\u4e2a\u5bf9\u8c61\u5206\u914d\u7ed9\u5176\u7236\u5bf9\u8c61\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," \u6570\u7ec4\u3002This may not make intuitive sense, but consider this logic:"),(0,i.kt)("p",null,"\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," \u88ab\u5206\u914d\u7ed9\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"8")," \u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," \u6570\u7ec4\n\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"6")," \u88ab\u5206\u914d\u7ed9\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," \u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," \u6570\u7ec4"),(0,i.kt)("p",null,"\u5206\u914d\u7ed9\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"8")," \u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," \u6570\u7ec4\u7684\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),"\uff0c\u5b9e\u9645\u4e0a\u53ea\u662f\u5bf9\u5185\u5b58\u4e2d\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," \u7684\u5f15\u7528\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," \u6570\u7ec4\u5c06\u5177\u6709\u5bf9\u8c61 ",(0,i.kt)("inlineCode",{parentName:"p"},"6")," \u5f15\u7528\u3002"),(0,i.kt)("p",null,"This logic extends to the entire array, meaning we just need to go through the array once to build out our tree!"),(0,i.kt)("p",null,"Here is a potential non-recursive solution based on this idea:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const flat = [\n  { id: 1, parentId: 3 },\n  { id: 3, parentId: 8 },\n  { id: 4, parentId: 6 },\n  { id: 6, parentId: 3 },\n  { id: 7, parentId: 6 },\n  { id: 8, parentId: null },\n  { id: 10, parentId: 8 }, \n  { id: 13, parentId: 14 },\n  { id: 14, parentId: 10 }\n]\n\n// Create root for top-level node(s)\nconst root = [];\n\nflat.forEach(node => {\n  // No parentId means top level\n  if (!node.parentId) return root.push(node);\n  \n  // Insert node as child of parent in flat array\n  const parentIndex = flat.findIndex(el => el.id === node.parentId);\n  if (!flat[parentIndex].children) {\n    return flat[parentIndex].children = [node];\n  }\n  \n  flat[parentIndex].children.push(node);\n});\n\nconsole.log(root);\n")),(0,i.kt)("p",null,"Nice and simple, and we only iterate through the array once!"),(0,i.kt)("p",null,"\u8fd9\u91cc\u6211\u60f3\u505a\u4e00\u4e2a\u989d\u5916\u7684\u4f18\u5316\uff1a\u6bcf\u6b21\u5faa\u73af\u4f7f\u7528\u7684 findIndex \u51fd\u6570\u5bf9\u4e8e\u5c0f\u7684\u793a\u4f8b\u6811\u6765\u8bf4\u5e76\u4e0d\u662f\u4ec0\u4e48\u5927\u95ee\u9898\uff0c\u4f46\u5982\u679c\u6211\u4eec\u4f7f\u7528\u4e00\u68f5\u5927\u7684\u6811\uff0c\u8fd9\u5b9e\u9645\u4e0a\u53ef\u80fd\u4f1a\u53d8\u5f97\u6027\u80fd\u5dee\u3002\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u6765\u7f13\u5b58\u627e\u5230\u7684\u7236\u4f4d\u7f6e\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'// Create root for top-level node(s)\nconst root = [];\n// Cache found parent index\nconst map = {};\n\nflat.forEach(node => {\n  // No parentId means top level\n  if (!node.parentId) return root.push(node);\n  \n  // Insert node as child of parent in flat array\n  let parentIndex = map[node.parentId];\n  if (typeof parentIndex !== "number") {\n    parentIndex = flat.findIndex(el => el.id === node.parentId);\n    map[node.parentId] = parentIndex;\n  }\n  \n  if (!flat[parentIndex].children) {\n    return flat[parentIndex].children = [node];\n  }\n  \n  flat[parentIndex].children.push(node);\n});\n\nconsole.log(root);\n')),(0,i.kt)("p",null,"Success! We have accomplished our tree build without implementing a recursive function."))}s.isMDXComponent=!0},8580:function(e,n,t){"use strict";n.Z=t.p+"assets/images/example_tree_structure-5b45ae46077916a2e5b096aadab36848.png"}}]);