(self.webpackChunk_site_blog=self.webpackChunk_site_blog||[]).push([[5150],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4722:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(2122),r=n(9756),s=(n(7294),n(3905)),o=["components"],i={},l="What is the `toJSON()` Function in JavaScript?",c={unversionedId:"core/detail/what_is_the_tojson_function_in_javascript_en",id:"core/detail/what_is_the_tojson_function_in_javascript_en",isDocsHomePage:!1,title:"What is the `toJSON()` Function in JavaScript?",description:"In JavaScript, the JSON.stringify() function looks for functions named toJSON in the object being serialized. If an object has a toJSON function, JSON.stringify() calls toJSON() and serializes the return value from toJSON() instead.",source:"@site/docs/core/detail/what_is_the_tojson_function_in_javascript_en.md",sourceDirName:"core/detail",slug:"/core/detail/what_is_the_tojson_function_in_javascript_en",permalink:"/blog/docs/core/detail/what_is_the_tojson_function_in_javascript_en",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/core/detail/what_is_the_tojson_function_in_javascript_en.md",version:"current",frontMatter:{}},p=[{value:"With ES6 Classes",id:"with-es6-classes",children:[]},{value:"<code>toJSON()</code> in the Wild",id:"tojson-in-the-wild",children:[]},{value:"Moving On",id:"moving-on",children:[]}],u={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"what-is-the-tojson-function-in-javascript"},"What is the ",(0,s.kt)("inlineCode",{parentName:"h1"},"toJSON()")," Function in JavaScript?"),(0,s.kt)("p",null,"In JavaScript, the ",(0,s.kt)("a",{parentName:"p",href:"https://thecodebarbarian.com/the-80-20-guide-to-json-stringify-in-javascript"},(0,s.kt)("inlineCode",{parentName:"a"},"JSON.stringify()")," function")," looks for functions named ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON")," in the object being serialized. If an object has a ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON")," function, ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," calls ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," and serializes the return value from ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," instead."),(0,s.kt)("p",null,"For example, the below script prints the same thing as ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.stringify({ answer: 42 })"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const json = JSON.stringify({\n  answer: { toJSON: () => 42 }\n});\n\nconsole.log(json); // {"answer":42}\n')),(0,s.kt)("h2",{id:"with-es6-classes"},"With ",(0,s.kt)("a",{parentName:"h2",href:"https://masteringjs.io/tutorials/fundamentals/class"},"ES6 Classes")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," function is useful for making sure ES6 classes get serialized correctly. For example, suppose you have a custom JavaScript error class."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"class HTTPError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n  }\n}\n")),(0,s.kt)("p",null,"By default, JavaScript isn't great with serializing errors. The below script prints ",(0,s.kt)("inlineCode",{parentName:"p"},'{"status":404}'),", no error message or stack trace."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"class HTTPError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n  }\n}\n\nconst e = new HTTPError('Fail', 404);\nconsole.log(JSON.stringify(e)); // {\"status\":404}\n")),(0,s.kt)("p",null,"However, if you add a ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," method to your ",(0,s.kt)("inlineCode",{parentName:"p"},"HTTPError")," class, you can configure how JavaScript serializes instances of ",(0,s.kt)("inlineCode",{parentName:"p"},"HTTPError"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'class HTTPError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n  }\n\n  toJSON() {\n    return { message: this.message, status: this.status };\n  }\n}\n\nconst e = new HTTPError(\'Fail\', 404);\nconsole.log(JSON.stringify(e)); // {"message":"Fail","status":404}\n')),(0,s.kt)("p",null,"You can even get fancy and make ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," serialize the stack trace if the ",(0,s.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," is ",(0,s.kt)("inlineCode",{parentName:"p"},"development"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'class HTTPError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n  }\n\n  toJSON() {\n    const ret = { message: this.message, status: this.status };\n    if (process.env.NODE_ENV === \'development\') {\n      ret.stack = this.stack;\n    }\n    return ret;\n  }\n}\n\nconst e = new HTTPError(\'Fail\', 404);\n// {"message":"Fail","status":404,"stack":"Error: Fail\\n    at ...\nconsole.log(JSON.stringify(e));\n')),(0,s.kt)("p",null,"The neat thing about ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," is that JavaScript handles recursion for you, so it will still correctly serialize deeply nested ",(0,s.kt)("inlineCode",{parentName:"p"},"HTTPError")," instances and ",(0,s.kt)("inlineCode",{parentName:"p"},"HTTPError")," instances in arrays."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'class HTTPError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n  }\n\n  toJSON() {\n    return { message: this.message, status: this.status };\n  }\n}\n\nconst e = new HTTPError(\'Fail\', 404);\n// {"nested":{"message":"Fail","status":404},"arr":[{"message":"Fail","status":404}]}\nconsole.log(JSON.stringify({\n  nested: e,\n  arr: [e]\n}));\n')),(0,s.kt)("p",null,"Many libraries and frameworks use ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," under the hood. For example, ",(0,s.kt)("a",{parentName:"p",href:"https://masteringjs.io/tutorials/express/json"},"Express' ",(0,s.kt)("inlineCode",{parentName:"a"},"res.json()")," function")," and ",(0,s.kt)("a",{parentName:"p",href:"https://masteringjs.io/tutorials/axios/post"},"Axios POST requests")," convert objects to JSON using ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.stringify()"),". So custom ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," functions work with those modules as well."),(0,s.kt)("h2",{id:"tojson-in-the-wild"},(0,s.kt)("inlineCode",{parentName:"h2"},"toJSON()")," in the Wild"),(0,s.kt)("p",null,"Many Node.js libraries and frameworks use ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," to ensure ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," can serialize complex objects into something meaningful. For example, ",(0,s.kt)("a",{parentName:"p",href:"https://thecodebarbarian.com/formatting-javascript-dates-with-moment-js.html"},"Moment.js")," objects have a nice simple ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," function that looks like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"    function toJSON () {\n        // JSON.stringify(new Date(NaN)) === 'null'\n        return this.isValid() ? this.toISOString() : 'null';\n    }\n")),(0,s.kt)("p",null,"You can try it yourself by running:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const moment = require('moment');\nconsole.log(moment('2019-06-01').toJSON.toString());\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://thecodebarbarian.com/an-overview-of-buffers-in-node-js.html#working-with-buffers"},"Node.js buffers")," also have a ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," function."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const buf = Buffer.from('abc');\nconsole.log(buf.toJSON.toString());\n\n// Prints:\nfunction toJSON() {\n  if (this.length > 0) {\n    const data = new Array(this.length);\n    for (var i = 0; i < this.length; ++i)\n      data[i] = this[i];\n    return { type: 'Buffer', data };\n  } else {\n    return { type: 'Buffer', data: [] };\n  }\n}\n")),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://mongoosejs.com"},"Mongoose")," documents also have a ",(0,s.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/api/document.html#document_Document-toJSON"},(0,s.kt)("inlineCode",{parentName:"a"},"toJSON()")," function")," that ensures the internal state of Mongoose documents doesn't end up in ",(0,s.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," output."),(0,s.kt)("h2",{id:"moving-on"},"Moving On"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," function is an important tool when building classes in JavaScript. It is how you control how JavaScript serializes your class into JSON. The ",(0,s.kt)("inlineCode",{parentName:"p"},"toJSON()")," function can help you solve numerous problems, like making sure dates or Node.js buffers get serialized in the right format for your app. Give it a shot next time you write an ES6 class."))}m.isMDXComponent=!0}}]);