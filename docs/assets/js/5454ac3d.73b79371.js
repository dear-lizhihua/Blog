(self.webpackChunk_site_blog=self.webpackChunk_site_blog||[]).push([[9411],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3340:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),l=["components"],o={id:"how_to_create_interactive_command_line_prompts_with_inquirer_js",title:"\u5982\u4f55\u4f7f\u7528 Inquirer.js \u521b\u5efa\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u63d0\u793a"},s=void 0,p={unversionedId:"core/server/how_to_create_interactive_command_line_prompts_with_inquirer_js",id:"core/server/how_to_create_interactive_command_line_prompts_with_inquirer_js",isDocsHomePage:!1,title:"\u5982\u4f55\u4f7f\u7528 Inquirer.js \u521b\u5efa\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u63d0\u793a",description:"\u539f\u6587\uff1aHow To Create Interactive Command-line Prompts with Inquirer.js",source:"@site/docs/core/server/how_to_create_interactive_command_line_prompts_with_inquirer_js.md",sourceDirName:"core/server",slug:"/core/server/how_to_create_interactive_command_line_prompts_with_inquirer_js",permalink:"/blog/docs/core/server/how_to_create_interactive_command_line_prompts_with_inquirer_js",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/core/server/how_to_create_interactive_command_line_prompts_with_inquirer_js.md",version:"current",frontMatter:{id:"how_to_create_interactive_command_line_prompts_with_inquirer_js",title:"\u5982\u4f55\u4f7f\u7528 Inquirer.js \u521b\u5efa\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u63d0\u793a"},sidebar:"docs",previous:{title:"\u4f7f\u7528 Koa \u6784\u5efa\u4e00\u4e2a hello world \u5e94\u7528\u7a0b\u5e8f",permalink:"/blog/docs/core/server/how_to_build_a_hello_world_application_with_koa"},next:{title:"\u5982\u4f55\u5904\u7406 Node.js scripts \u4e2d\u7684\u547d\u4ee4\u884c\u53c2\u6570",permalink:"/blog/docs/core/server/how_to_handle_command_line_arguments_in_node_js_scripts"}},u=[{value:"Introduction",id:"introduction",children:[]},{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Step 1 \u2014 Setting Up the Project",id:"step-1--setting-up-the-project",children:[]},{value:"Step 2 \u2014 Creating Prompts",id:"step-2--creating-prompts",children:[]},{value:"Step 3 \u2014 Creating Multiple Prompts",id:"step-3--creating-multiple-prompts",children:[]},{value:"Step 4 \u2014 Using Lists, Raw Lists, Expandable Lists, Checkboxes, Passwords, and Editors",id:"step-4--using-lists-raw-lists-expandable-lists-checkboxes-passwords-and-editors",children:[{value:"List",id:"list",children:[]},{value:"Raw List",id:"raw-list",children:[]},{value:"Expandable List",id:"expandable-list",children:[]},{value:"Checkbox",id:"checkbox",children:[]},{value:"Password",id:"password",children:[]},{value:"Editor",id:"editor",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],c={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u539f\u6587\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://www.digitalocean.com/community/tutorials/nodejs-interactive-command-line-prompts"},"How To Create Interactive Command-line Prompts with Inquirer.js"))),(0,a.kt)("h3",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/inquirer"},"Inquirer.js")," is a collection of common interactive command-line user interfaces. This includes typing answers to questions or selecting a choice from a list."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer")," package provides several default prompts and is highly configurable. It is also extensible by way of a plug-in interface. It even supports promises and ",(0,a.kt)("inlineCode",{parentName:"p"},"async/await")," syntax."),(0,a.kt)("p",null,"In this article, you will install and explore some of the features of Inquirer.js."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"If you would like to follow along with this article, you will need:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A local development environment for Node.js. Follow ",(0,a.kt)("a",{parentName:"li",href:"https://www.digitalocean.com/community/tutorial_series/how-to-install-node-js-and-create-a-local-development-environment"},"How to Install Node.js and Create a Local Development Environment"),".")),(0,a.kt)("p",null,"This tutorial was verified with Node v15.14.0, ",(0,a.kt)("inlineCode",{parentName:"p"},"npm")," v7.10.0, and ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer")," v8.0.0."),(0,a.kt)("h2",{id:"step-1--setting-up-the-project"},"Step 1 \u2014 Setting Up the Project"),(0,a.kt)("p",null,"First, open your terminal window and create a new project directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"mkdir inquirer-example\n")),(0,a.kt)("p",null,"Then, navigate to this directory:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cd inquirer-example\n")),(0,a.kt)("p",null,"To start adding prompts to your Node.js scripts, you will need to install the ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer")," package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install inquirer\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"At this point, you have a new project ready to use Inquirer.js."),(0,a.kt)("h2",{id:"step-2--creating-prompts"},"Step 2 \u2014 Creating Prompts"),(0,a.kt)("p",null,"Now, create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," file in your project directory and open it with your code editor."),(0,a.kt)("p",null,"Within your script, be sure to require ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer"),":"),(0,a.kt)("p",null,"index.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Add a prompt asking the user for their favorite reptile:"),(0,a.kt)("p",null,"index.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      name: 'faveReptile',\n      message: 'What is your favorite reptile?'\n    },\n  ])\n  .then(answers => {\n    console.info('Answer:', answers.faveReptile);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Revisit your terminal window and run the script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node index.js\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"You will be presented with a prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? What is your favorite reptile?\n")),(0,a.kt)("p",null,"Providing an answer will display the response:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? What is your favorite reptile? Crocodiles\nAnswer: Crocodiles\n")),(0,a.kt)("p",null,"You can provide a ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," value that allows the user to press ",(0,a.kt)("inlineCode",{parentName:"p"},"ENTER")," without submitting any answer:"),(0,a.kt)("p",null,"index.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      name: 'faveReptile',\n      message: 'What is your favorite reptile?',\n      default: 'Alligators'\n    },\n  ])\n  .then(answers => {\n    console.info('Answer:', answers.faveReptile);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Run the script again, and you will be presented with a prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? What is your favorite reptile? (Alligators)\n")),(0,a.kt)("p",null,"Pressing ",(0,a.kt)("inlineCode",{parentName:"p"},"ENTER")," without an answer will submit the default answer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? What is your favorite reptile? Alligators\nAnswer: Alligators\n")),(0,a.kt)("p",null,"Now, you can create prompts and set default values."),(0,a.kt)("h2",{id:"step-3--creating-multiple-prompts"},"Step 3 \u2014 Creating Multiple Prompts"),(0,a.kt)("p",null,"You may have noticed the ",(0,a.kt)("inlineCode",{parentName:"p"},".prompt()")," method accepts an array or objects. That\u2019s because you can string a series of prompt questions together and all of the answers will be available by name as part of the ",(0,a.kt)("inlineCode",{parentName:"p"},"answers")," variable once all of the prompts have been resolved."),(0,a.kt)("p",null,"Revisit ",(0,a.kt)("inlineCode",{parentName:"p"},"index.js")," in your code editor and add a prompt asking the user for their favorite color:"),(0,a.kt)("p",null,"index.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      name: 'faveReptile',\n      message: 'What is your favorite reptile?',\n      default: 'Alligators'\n    },\n    {\n      name: 'faveColor',\n      message: 'What is your favorite color?',\n      default: '#008f68'\n    },\n  ])\n  .then(answers => {\n    console.info('Answers:', answers);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Run the script again, and you will be presented with two prompts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? What is your favorite reptile? Alligators\n? What is your favorite color? #008f68\nAnswers: { faveReptile: 'Alligators', faveColor: '#008f68' }\n")),(0,a.kt)("p",null,"Now, you can create multiple prompts."),(0,a.kt)("h2",{id:"step-4--using-lists-raw-lists-expandable-lists-checkboxes-passwords-and-editors"},"Step 4 \u2014 Using Lists, Raw Lists, Expandable Lists, Checkboxes, Passwords, and Editors"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"inquirer")," does support more than prompting a user for text input. For the sake of example, the following types will be showcased by themselves but you very well could chain them together by passing them in the same array."),(0,a.kt)("h3",{id:"list"},"List"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," type allows you to present the user with a fixed set of options to pick from, instead of a free form input as the ",(0,a.kt)("inlineCode",{parentName:"p"},"input")," type provides:"),(0,a.kt)("p",null,"list.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      type: 'list',\n      name: 'reptile',\n      message: 'Which is better?',\n      choices: ['alligator', 'crocodile'],\n    },\n  ])\n  .then(answers => {\n    console.info('Answer:', answers.reptile);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Revisit your terminal window and run the script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node list.js\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"You will be presented with a ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? Which is better? (Use arrow keys)\n\u276f alligator\n  crocodile\n")),(0,a.kt)("p",null,"The user can ",(0,a.kt)("inlineCode",{parentName:"p"},"ARROW UP")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ARROW DOWN")," keys to navigate the list of choices. ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"k")," keyboard navigation is also available."),(0,a.kt)("h3",{id:"raw-list"},"Raw List"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"rawlist")," type is similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),". It displays a list of choices and allows the user to enter the index of their choice ","(","starting at ",(0,a.kt)("inlineCode",{parentName:"p"},"1"),")",":"),(0,a.kt)("p",null,"rawlist.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      type: 'rawlist',\n      name: 'reptile',\n      message: 'Which is better?',\n      choices: ['alligator', 'crocodile'],\n    },\n  ])\n  .then(answers => {\n    console.info('Answer:', answers.reptile);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Revisit your terminal window and run the script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node list.js\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"You will be presented with a ",(0,a.kt)("inlineCode",{parentName:"p"},"rawlist")," prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? Which is better?\n  1) alligator\n  2) crocodile\n  Answer:\n")),(0,a.kt)("p",null,"Submitting an invalid value will result in a ",(0,a.kt)("inlineCode",{parentName:"p"},'"Please enter a valid index"')," error."),(0,a.kt)("h3",{id:"expandable-list"},"Expandable List"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"expand")," type is reminiscent of some command-line applications that present you with a list of characters that map to functionality that can be entered. ",(0,a.kt)("inlineCode",{parentName:"p"},"expand")," prompts will initially present the user with a list of the available character values and give context to them when the key is pressed:"),(0,a.kt)("p",null,"expand.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      type: 'expand',\n      name: 'reptile',\n      message: 'Which is better?',\n      choices: [\n        {\n          key: 'a',\n          value: 'alligator',\n        },\n        {\n          key: 'c',\n          value: 'crocodile',\n        },\n      ],\n    },\n  ])\n  .then(answers => {\n    console.info('Answer:', answers.reptile);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Revisit your terminal window and run the script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node expand.js\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"You will be presented with a ",(0,a.kt)("inlineCode",{parentName:"p"},"expand")," prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? Which is better? (acH)\n")),(0,a.kt)("p",null,"By default, the ",(0,a.kt)("inlineCode",{parentName:"p"},"H")," option is included which stands for ",(0,a.kt)("inlineCode",{parentName:"p"},'"Help"')," and upon entering ",(0,a.kt)("inlineCode",{parentName:"p"},"H")," and hitting ",(0,a.kt)("inlineCode",{parentName:"p"},"ENTER")," will switch to a list of the options, indexed by their characters that can then be entered to make a selection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? Which is better? (acH)\n  a) alligator\n  c) crocodile\n  h) Help, list all options\n  Answer:\n")),(0,a.kt)("p",null,"Submitting an invalid value will result in a ",(0,a.kt)("inlineCode",{parentName:"p"},'"Please enter a valid command"')," error."),(0,a.kt)("h3",{id:"checkbox"},"Checkbox"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"checkbox")," type is also similar to ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),". Instead of a single selection, it allows you to select multiple choices."),(0,a.kt)("p",null,"checkbox.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      type: 'checkbox',\n      name: 'reptiles',\n      message: 'Which reptiles do you love?',\n      choices: [\n        'Alligators', 'Snakes', 'Turtles', 'Lizards',\n      ],\n    },\n  ])\n  .then(answers => {\n    console.info('Answer:', answers.reptiles);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Revisit your terminal window and run the script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node checkbox.js\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"You will be presented with a ",(0,a.kt)("inlineCode",{parentName:"p"},"checkbox")," prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? Which reptiles do you love? (Press <space> to select, <a> to toggle all, <i> to invert selection)\n\u276f\u25ef Alligators\n \u25ef Snakes\n \u25ef Turtles\n \u25ef Lizards\n")),(0,a.kt)("p",null,"Similar to the other ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," types, you can use the arrow keys to navigate. To make a selection, you hit ",(0,a.kt)("inlineCode",{parentName:"p"},"SPACE")," and can also select all with ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," or invert your selection with ",(0,a.kt)("inlineCode",{parentName:"p"},"i"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"OutputAnswer: [ 'Alligators', 'Snakes', 'Turtles', 'Lizards' ]\n")),(0,a.kt)("p",null,"Unlike the other prompt types, the answer for this prompt type will return an array instead of a string. It will always return an array, even if the user opted to not select any items."),(0,a.kt)("h3",{id:"password"},"Password"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"password")," type will hide input from the user. This allows users to provide sensitive information that should not be seen:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      type: 'password',\n      name: 'secret',\n      message: 'Tell me a secret',\n    },\n  ])\n  .then(answers => {\n    // Displaying the password for debug purposes only.\n    console.info('Answer:', answers.secret);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Revisit your terminal window and run the script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node password.js\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"You will be presented with a ",(0,a.kt)("inlineCode",{parentName:"p"},"password")," prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? Tell me a secret [hidden]\n")),(0,a.kt)("p",null,"The input is hidden from the user."),(0,a.kt)("h3",{id:"editor"},"Editor"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"editor")," type allows users to use their default text editor for larger text inputs."),(0,a.kt)("p",null,"editor.js"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const inquirer = require('inquirer');\n\ninquirer\n  .prompt([\n    {\n      type: 'editor',\n      name: 'story',\n      message: 'Tell me a story, a really long one!',\n    },\n  ])\n  .then(answers => {\n    console.info('Answer:', answers.story);\n  });\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"Revisit your terminal window and run the script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node editor.js\n")),(0,a.kt)("p",null,"Copy"),(0,a.kt)("p",null,"You will be presented with an ",(0,a.kt)("inlineCode",{parentName:"p"},"editor")," prompt:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Output? Tell me a story, a really long one! Press <enter> to launch your preferred editor.\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"inquirer")," will attempt to open a text editor on the user\u2019s system based on the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"$EDITOR")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"$VISUAL")," environment variables. If neither are present, ",(0,a.kt)("inlineCode",{parentName:"p"},"vim")," ","(","Linux",")"," and ",(0,a.kt)("inlineCode",{parentName:"p"},"notepad.exe")," ","(","Windows",")"," will be used instead."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"In this article, you installed and explored some of the features of Inquirer.js. This tool can be useful for retrieving information from users."),(0,a.kt)("p",null,"Continue your learning with some of the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/SBoudrias/Inquirer.js#plugins"},"plugins"),". Like ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer-autocomplete-prompt"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer-search-list"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"inquirer-table-prompt"),"."))}d.isMDXComponent=!0}}]);